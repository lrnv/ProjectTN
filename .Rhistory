}
return(list(u = u,v = v,tau = tau,lambda = lambda))
}
gibbs(10) -> machin
machin$tau
machin$tau %>% as.vector
machin$tau %>% unlist
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj)
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_u,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = u,v = v,tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(10) -> machin
machin$tau
machin$u
do.call(what = machin$u, rbind)
do.call(rbind, machin$u)
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj)
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_u,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = do.call(rbind,v),tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(10) -> machin
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj)
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_u,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = v,tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(10) -> machin
machin$u
machin$v
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj)
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_v,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = v,tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(10) -> machin
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj)
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_v,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = do.call(rbind, v),tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(10) -> machin
machin
gibbs(20) -> machin
machin
b
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj) - 1
# Puis on peut lancer l'algorythme de mise a jour :
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_v,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = do.call(rbind, v),tau = unlist(tau),lambda = unlist(lambda)))
}
logf_ui <- function(ui,u,v,tau,lambda,n,i){
# moyenne des u des voisins de i :
uBari <- mean(as.numeric(as.vector(adj[i,]) * (u))[-i])
return(-c[i]*exp(ui+v[i]) + ui *n[i] - nbVoisins[i]/(2*tau) *(ui - uBari))
}
logf_vi <- function(vi,u,v,tau,lambda,n,i){
return(-c[i]*exp(u[i]+vi) + vi*n[i] - 1/(2*lambda) * vi^2)
}
gibbs <- function(NbVal){
# On commence par initialisé :
r = 10 # nombre de régions.
u0 = 0
v0 = 0
u = rep(u0,r)
v = rep(v0,r)
xi = 0.01
c = as.vector(data$Pred) # previsions sans la covariable géographique
n = as.vector(data$NbSin) #nb de sin observé pour la région i
nbVoisins <- rowSums(adj) - 1
# Implémentons les densitées :
logf_ui <- function(ui,u,v,tau,lambda,n,i){
# moyenne des u des voisins de i :
uBari <- mean(as.numeric(as.vector(adj[i,]) * (u))[-i])
return(-c[i]*exp(ui+v[i]) + ui *n[i] - nbVoisins[i]/(2*tau) *(ui - uBari))
}
logf_vi <- function(vi,u,v,tau,lambda,n,i){
return(-c[i]*exp(u[i]+vi) + vi*n[i] - 1/(2*lambda) * vi^2)
}
# Commeçons par créer tau et lambda, les paramètres de variance de U et V :
# Initialisation de tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- u[i] - u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau <- list((xi + sommeCarre)/urchisq(n = 1,df = r-2))
# Initialisation de lambda : idem
lambda <- list((xi + sum(v^2))/urchisq(n = 1,df = r-2))
# init de U et v sous forme de lists :
u <- list(u)
v <- list(v)
# Maintenant qu'on a unitialisé tout les trucs on peut faire une boucle :
for (j in 2:NbVal){
# mise a jour de u et v :
new_u <- vector()
new_v <- vector()
for (i in 1:10){
to_sim1 <- function(var){
return(logf_ui(ui = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_u <-c(new_u,ur(ars.new(to_sim1,lb=-15,ub=15)))
}
for (i in 1:10){
to_sim2 <- function(var){
return(logf_vi(vi = var,u = u[[length(u)]],v=v[[length(v)]],tau=tau[[length(tau)]],lambda=lambda[[length(lambda)]],n=n,i=i))
}
new_v <-c(new_v,ur(ars.new(to_sim2,lb=-15,ub=15)))
}
u[[length(u)+1]] <- new_u
v[[length(v)+1]] <- new_v
# mise a jour de tau et lambda :
last_u <- u[[length(u)]]
last_v <- v[[length(v)]]
# Update tau :
mat <- matrix(nrow = 10,ncol = 10)
for (i in 1:10){
for (j in 1:10){
mat[i,j] <- last_u[i] - last_u[j]
}
}
sommeCarre <- sum(adj * mat^2)
tau[[length(tau)+1]] <- (xi + sommeCarre)/urchisq(n = 1,df = r-2)
# Update lambda :
lambda[[length(lambda)+1]] <- (xi + sum(last_v^2))/urchisq(n = 1,df = r-2)
}
return(list(u = do.call(rbind, u),v = do.call(rbind, v),tau = unlist(tau),lambda = unlist(lambda)))
}
gibbs(1à)
gibbs(10)
Simu <- gibbs(1000)
Simu
Simu$tau %>% density %>% plot
Simu$lambda %>% density %>% plot
par(mfrow = c(2,5))
apply(Simu$u,2, . %>% density %>% plot )
par(mfrow = c(2,5))
apply(Simu$v,2, . %>% density %>% plot )
Simu$tau %>% density %>% plot
Simu$lambda %>% density %>% plot
par(mfrow = c(2,5))
apply(Simu$u,2, . %>% density %>% plot )
par(mfrow = c(2,5))
apply(Simu$v,2, . %>% density %>% plot )
Simu$tau %>% density %>% plot
Simu$lambda %>% density %>% plot
par(mfrow = c(2,5))
apply(Simu$u,2, . %>% density %>% plot )
par(mfrow = c(2,5))
apply(Simu$v,2, . %>% density %>% plot )
simu$tau
Simu$tau
Simu$tau %>% ts
Simu$tau %>% ts %>% plot
Simu$tau %>% ts %>% plot
Simu$lambda %>% ts %>% plot
Simu$u[1,] %>% ts %>% plot
Simu$u[,1] %>% ts %>% plot
Simu$u[,2] %>% ts %>% plot
Simu$u[,3] %>% ts %>% plot
Simu$u[,4] %>% ts %>% plot
